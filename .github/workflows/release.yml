name: image taging 

on:
  pull_request:
    types: [ closed ]
    branches: [main]

jobs:
  new_version:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-node@v3
      with:
       node-version: 16

    #- name: Check labels
    #  uses: docker://agilepathway/pull-request-label-checker:latest
    #  with:
    #    one_of: version:major,version:minor,version:patch,no_release,''
    #    repo_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Looking for minor changes 
      if:  ${{contains(github.event.pull_request.labels.*.name, 'version:minor')}}
      run: echo "NEW_VERSION=$(npm version minor --no-git-tag-version --tag-version-prefix="")" >> $GITHUB_ENV

    - name: Looking for major changes
      if:  ${{contains(github.event.pull_request.labels.*.name, 'version:major')}}
      run: echo "NEW_VERSION=$(npm version major --no-git-tag-version --tag-version-prefix="")" >> $GITHUB_ENV

    - name: Looking for patch changes
      if: ${{contains(github.event.pull_request.labels.*.name, 'version:patch')}}
      run: echo "NEW_VERSION=$(npm version patch --no-git-tag-version --tag-version-prefix="")" >> $GITHUB_ENV
      
    - name: No changes
      if: ${{contains(github.event.pull_request.labels.*.name, 'no_release')}}
      run: echo 'The changes in this push are very very small and do not affect versioning'

    - name: new version
      run: echo $NEW_VERSION

    - name: push-tag
      run: |
        git config --global user.email "new_version@fornul.io"
        git config --global user.name "Github Action"
        git tag -a -m "new release" $NEW_VERSION
        git add .
        git commit -m "new version"
        git push origin main --tags 

    # outputs:
    #   new_version: $NEW_VERSION
 
    # - name: Tagging image
    #   id: image-tag
    #   uses: tamplate tag akcije
    #   with:
    #     new_verison: $NEW_VERSION

    # - name: Build, tag, and push image to Amazon ECR
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     ECR_REPOSITORY: ${{ secrets.ecr_repository }}
    #     SERVICE_NAME: ${{ secrets.service_name}}
    #     IMAGE_TAG: ${{ steps.image-tag.outputs.new_version}}
    #   run: |
    #     docker build --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $SERVICE_NAME/.
    #     echo "Pushing image to ECR..."
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
